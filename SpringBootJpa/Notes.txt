1. It's a good practice to separate the different filetypes in different
packages.

2. Controller needs to be set up everytime. h2 needs to be enabled with the 
help of the application.properties:
spring.h2.console.enabled=true
spring.sql.init.platform=h2
spring.datasource.url=jdbc:h2:mem:aditya
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization = true

3. The h2 console can be accessed with localhost:8080/h2-console

4. JPA needs to be enabled to make a table, for which we need to call the class as 
a @Entity with a primary key marked as @Id

5. To create a new row using home.jsp, we need to first define the form function in 
Controller.java and then we need to define an interface and extend the CrudRepository. 
Thereafter, we need to call the class, in our case Alien and the ID needs to be defined,
in our case, Integer.

6. The interface needs to be called inside the Controller, and needs to be autowired.

7. We need a service layer because we are not sure about the source of data which is incoming.
The data directly interacts with the service layer and therefore, service layer is a must.

8. For viewing on the basis of one of the attributes, we can use ModelAndView.

9. ModelAndView enables a constructor which view can be passed in the argument.

10. One can also used customised queries by defining them in the interface which extends CrudRepository

11. Preinstalled Query Methods are present. One of them is findBy<VarName> or getBy<VarName> which returns
the desired output wrt that variable.

12. Another query method is GreaterThan. Works in the following format:
findBy<VarName>GreaterThan(). Same for LessThan. 

13. Another property is Sorted. In this, we need to define a @Query on top of the function.
    Eg: 
    @Query("from Alien where tech=?1 order by aname")
    List<Alien> findByTechSorted(String tech);

14. REST Example utilises the resource and can be implemented by the Spring Framework

15. @PathVariable is used to assign the value of the variable and map it to the java program. Additionally, the variables
of the @RequestMapping are enclosed in {}. 

16. JpaRepository is an extension of CrudRepository with additional features. 

17. A client (in our case Postman) is generally used in Spring Framework to help ease and view complex queries like Delete and Update.

18. In order to ensure that the XML format is also supported by the application, the dev needs to include it as a dependency in pom.xml
Map it to the jackson version you are using and copy that dependency.

19. Now if a person sets the header for key Accept as the value application/xml, then the return type will be xml

20. In order to restrict the returning body to a particular format, one can add the argument of produces which can have the format name 
in the curly brackets as a string. eg @RequestMapping(path = "/aliens", produces = {"application/xml"})

21. POST can be implemented with the help of PostMapping. [Similarly, GetMapping is also present as an option]

22. If the complete application is REST based, meaning all the return datatypes are in the format of json or related formats, then instead
of Controller, one can simply call it a RestController. This would mean that the dev does not need to call @ResponseBody everytime

23. In order to send a raw data, one has to call the argument as RequestBody to ensure that the raw data is accepted as a body. Note that the 
raw data has to be in json format for obvious reasons.

24. For post, if the data format needs to be restricted, then one has to use consumes instead of produces.

25. 