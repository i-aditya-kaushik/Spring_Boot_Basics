1. It's a good practice to separate the different filetypes in different
packages.

2. Controller needs to be set up everytime. h2 needs to be enabled with the 
help of the application.properties:
spring.h2.console.enabled=true
spring.sql.init.platform=h2
spring.datasource.url=jdbc:h2:mem:aditya
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization = true

3. The h2 console can be accessed with localhost:8080/h2-console

4. JPA needs to be enabled to make a table, for which we need to call the class as 
a @Entity with a primary key marked as @Id

5. To create a new row using home.jsp, we need to first define the form function in 
Controller.java and then we need to define an interface and extend the CrudRepository. 
Thereafter, we need to call the class, in our case Alien and the ID needs to be defined,
in our case, Integer.

6. The interface needs to be called inside the Controller, and needs to be autowired.

7. We need a service layer because we are not sure about the source of data which is incoming.
The data directly interacts with the service layer and therefore, service layer is a must.

8. For viewing on the basis of one of the attributes, we can use ModelAndView.

9. ModelAndView enables a constructor which view can be passed in the argument.

10. One can also used customised queries by defining them in the interface which extends CrudRepository

11. Preinstalled Query Methods are present. One of them is findBy<VarName> or getBy<VarName> which returns
the desired output wrt that variable.

12. Another query method is GreaterThan. Works in the following format:
findBy<VarName>GreaterThan(). Same for LessThan. 

13. Another property is Sorted. In this, we need to define a @Query on top of the function.
    Eg: 
    @Query("from Alien where tech=?1 order by aname")
    List<Alien> findByTechSorted(String tech);

14. REST Example utilises the resource and can be implemented by the Spring Framework

15. @PathVariable is used to assign the value of the variable and map it to the java program. Additionally, the variables
of the @RequestMapping are enclosed in {}. 